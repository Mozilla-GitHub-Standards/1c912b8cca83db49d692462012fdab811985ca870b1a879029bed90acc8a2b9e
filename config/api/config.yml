# The interface you would like the API to bind to, by default is assumes 127.0.0.1
# Uncomment the below line if you want to intentionally host the service on all interfaces
# bind: 0.0.0.0

# The TCP port that the service should use
port: 8000

# The TCP ports that the API is willing to queue and thus let workers scan
allowed_ports:
  - 22

# API Tokens (a crude mechanism for adding auth to your API)
#authentication: true
authentication: false

# If authentication is to true, the authentication tokens you generate below
# will be required to access certain API functions.
#
# Generate a new token using Ruby's Secure random uuid
# $ ruby -r securerandom -e 'puts SecureRandom.uuid'
#
# users:
#   - username    : starlord
#     token       : INSERT_GROOT_TOKEN
#   - username    : groot
#     token       : INSERT_GROOT_TOKEN
#   - username    : gamora
#     token       : INSERT_GAMORA_TOKEN

# Any remote workers (not on the loopback) will be required to authenticate to prevent
# unauthorized users from acting as rogue workers
# workers:
#   - worker_name : worker1
#     token       : INSERT_WORKER1_TOKEN

# Define database configuration
database:
 type: postgres
 name: ssh_observatory
 username: sshobs
 server: 127.0.0.1
 port: 5432

# Define targets that we feel are invalid targets for scanning (customize however you like, these are our defaults)
invalid_target_regexes:
  - ^127\. # Forbid IPv4 localhosts
  - ^::1  # Forbid IPv6 localhosts
  - ^10\. # Forbid RFC1918
  - ^192\.168 # Forbid RFC1918
  - ^172\.(1[6-9]|2[0-9]|3[0-1]) # Forbid RFC1918

invalid_target_strings:
  - localhost   # Forbid localhost ref verbatim
  - notallowed.example.com  # an FQDN example, so we know can prevent a FQDN from being scanned for whatever reason